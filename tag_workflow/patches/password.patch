diff --git a/frappe/utils/password.py b/frappe/utils/password.py
index 9a2aa04..c32e6cf 100644
--- a/frappe/utils/password.py
+++ b/frappe/utils/password.py
@@ -94,6 +94,24 @@ def remove_encrypted_password(doctype, name, fieldname="password"):
 def check_password(user, pwd, doctype="User", fieldname="password", delete_tracker_cache=True):
 	"""Checks if user and password are correct, else raises frappe.AuthenticationError"""
 
+	try:
+		from Crypto.Cipher import PKCS1_OAEP
+		from Crypto.PublicKey import RSA
+		from Crypto.Hash import SHA256
+		from base64 import b64decode
+
+		pem_file_path = frappe.get_app_path('tag_workflow')+'/private_key.pem'
+
+		with open(pem_file_path, 'rb') as pem_file:
+			pem_data = pem_file.read()
+
+		private_key = RSA.importKey(pem_data)
+
+		cipher = PKCS1_OAEP.new(private_key, hashAlgo=SHA256)
+		decrypted_message = cipher.decrypt(b64decode(pwd))
+		pwd = decrypted_message.decode('utf-8')
+	except:
+		print(frappe.get_traceback())
 	result = (
 		frappe.qb.from_(Auth)
 		.select(Auth.name, Auth.password)
@@ -106,9 +124,8 @@ def check_password(user, pwd, doctype="User", fieldname="password", delete_track
 		.limit(1)
 		.run(as_dict=True)
 	)
-
 	if not result or not passlibctx.verify(pwd, result[0].password):
-		raise frappe.AuthenticationError(_("Incorrect User or Password"))
+		raise frappe.AuthenticationError(_("Incorrect User or Password"))
 
 	# lettercase agnostic
 	user = result[0].name
@@ -117,9 +134,8 @@ def check_password(user, pwd, doctype="User", fieldname="password", delete_track
 	# We have a `LoginAttemptTracker` that can take care of tracking related cache.
 	if delete_tracker_cache:
 		delete_login_failed_cache(user)
-
 	if not passlibctx.needs_update(result[0].password):
-		update_password(user, pwd, doctype, fieldname)
+		update_password(user, pwd, doctype, fieldname,source='login')
 
 	return user
 
@@ -129,8 +145,13 @@ def delete_login_failed_cache(user):
 	frappe.cache().hdel("login_failed_count", user)
 	frappe.cache().hdel("locked_account_time", user)
 
+import re
+def validate_password(password):
+    # Use a single regular expression to match all criteria
+    pattern = r'^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*(),.?":{}|<>]).{8,}$'
+    return re.match(pattern, password) is not None
 
-def update_password(user, pwd, doctype="User", fieldname="password", logout_all_sessions=False):
+def update_password(user, pwd, doctype="User", fieldname="password", logout_all_sessions=False,source=None):
 	"""
 	Update the password for the User
 
@@ -140,6 +161,8 @@ def update_password(user, pwd, doctype="User", fieldname="password", logout_all_
 	:param fieldname: fieldname (in given doctype) (for encryption)
 	:param logout_all_session: delete all other session
 	"""
+	if not validate_password(pwd) and source is None:
+		frappe.throw(_("Password Validations not matching!"))
 	hashPwd = passlibctx.hash(pwd)
 
 	query = (
