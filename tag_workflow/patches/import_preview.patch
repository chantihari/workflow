diff --git a/frappe/public/js/frappe/data_import/import_preview.js b/frappe/public/js/frappe/data_import/import_preview.js
index 4b0f18e..9039a5f 100644
--- a/frappe/public/js/frappe/data_import/import_preview.js
+++ b/frappe/public/js/frappe/data_import/import_preview.js
@@ -1,10 +1,16 @@
-import DataTable from "frappe-datatable";
-import { get_columns_for_picker } from "./data_exporter";
+import DataTable from 'frappe-datatable';
 
-frappe.provide("frappe.data_import");
+frappe.provide('frappe.data_import');
 
 frappe.data_import.ImportPreview = class ImportPreview {
-	constructor({ wrapper, doctype, preview_data, frm, import_log, events = {} }) {
+	constructor({
+		wrapper,
+		doctype,
+		preview_data,
+		frm,
+		import_log,
+		events = {}
+	}) {
 		this.wrapper = wrapper;
 		this.doctype = doctype;
 		this.preview_data = preview_data;
@@ -17,8 +23,17 @@ frappe.data_import.ImportPreview = class ImportPreview {
 		});
 	}
 
+	set_csv_data(doc){
+		if(doc == "Contact" || doc == "Employee"){
+			let skip_data = ["JDoe@example.com"]
+			return  this.preview_data.data.filter(word =>{
+				return !skip_data.includes(word[3])
+			})
+		}
+		return  this.preview_data.data
+	}
 	refresh() {
-		this.data = this.preview_data.data;
+		this.data = this.set_csv_data(this.doctype);
 		this.make_wrapper();
 		this.prepare_columns();
 		this.prepare_data();
@@ -42,22 +57,22 @@ frappe.data_import.ImportPreview = class ImportPreview {
 		`);
 		frappe.utils.bind_actions_with_object(this.wrapper, this);
 
-		this.$table_preview = this.wrapper.find(".table-preview");
+		this.$table_preview = this.wrapper.find('.table-preview');
 	}
 
 	prepare_columns() {
 		this.columns = this.preview_data.columns.map((col, i) => {
 			let df = col.df;
 			let column_width = 120;
-			if (col.header_title === "Sr. No") {
+			if (col.header_title === 'Sr. No') {
 				return {
-					id: "srno",
-					name: "Sr. No",
-					content: "Sr. No",
+					id: 'srno',
+					name: 'Sr. No',
+					content: 'Sr. No',
 					editable: false,
 					focusable: false,
-					align: "left",
-					width: 60,
+					align: 'left',
+					width: 60
 				};
 			}
 
@@ -69,37 +84,37 @@ frappe.data_import.ImportPreview = class ImportPreview {
 					column_width += 50;
 				}
 				let column_title = `<span class="indicator red">
-					${col.header_title || `<i>${__("Untitled Column")}</i>`}
-					${!col.df ? show_warnings_button : ""}
+					${col.header_title || `<i>${__('Untitled Column')}</i>`}
+					${!col.df ? show_warnings_button : ''}
 				</span>`;
 				return {
 					id: frappe.utils.get_random(6),
-					name: col.header_title || (df ? df.label : "Untitled Column"),
+					name: col.header_title || (df ? df.label : 'Untitled Column'),
 					content: column_title,
 					skip_import: true,
 					editable: false,
 					focusable: false,
-					align: "left",
+					align: 'left',
 					width: column_width,
-					format: (value) => `<div class="text-muted">${value}</div>`,
+					format: value => `<div class="text-muted">${value}</div>`
 				};
 			}
 
 			let date_format = col.date_format
 				? col.date_format
-						.replace("%Y", "yyyy")
-						.replace("%y", "yy")
-						.replace("%m", "mm")
-						.replace("%d", "dd")
-						.replace("%H", "HH")
-						.replace("%M", "mm")
-						.replace("%S", "ss")
-						.replace("%b", "Mon")
+					.replace('%Y', 'yyyy')
+					.replace('%y', 'yy')
+					.replace('%m', 'mm')
+					.replace('%d', 'dd')
+					.replace('%H', 'HH')
+					.replace('%M', 'mm')
+					.replace('%S', 'ss')
+					.replace('%b', 'Mon')
 				: null;
 
 			let column_title = `<span class="indicator green">
 				${col.header_title || df.label}
-				${date_format ? `(${date_format})` : ""}
+				${date_format ? `(${date_format})` : ''}
 			</span>`;
 
 			return {
@@ -108,17 +123,17 @@ frappe.data_import.ImportPreview = class ImportPreview {
 				content: column_title,
 				df: df,
 				editable: false,
-				align: "left",
-				width: column_width,
+				align: 'left',
+				width: column_width
 			};
 		});
 	}
 
 	prepare_data() {
-		this.data = this.data.map((row) => {
-			return row.map((cell) => {
+		this.data = this.data.map(row => {
+			return row.map(cell => {
 				if (cell == null) {
-					return "";
+					return '';
 				}
 				return cell;
 			});
@@ -133,109 +148,106 @@ frappe.data_import.ImportPreview = class ImportPreview {
 		this.datatable = new DataTable(this.$table_preview.get(0), {
 			data: this.data,
 			columns: this.columns,
-			layout: this.columns.length < 10 ? "fluid" : "fixed",
+			layout: this.columns.length < 10 ? 'fluid' : 'fixed',
 			cellHeight: 35,
-			language: frappe.boot.lang,
-			translations: frappe.utils.datatable.get_translations(),
 			serialNoColumn: false,
 			checkboxColumn: false,
-			noDataMessage: __("No Data"),
-			disableReorderColumn: true,
+			noDataMessage: __('No Data'),
+			disableReorderColumn: true
 		});
 
-		let { max_rows_exceeded, max_rows_in_preview, total_number_of_rows } = this.preview_data;
+		let {
+			max_rows_exceeded,
+			max_rows_in_preview,
+			total_number_of_rows
+		} = this.preview_data;
 		if (max_rows_exceeded) {
 			let parts = [max_rows_in_preview, total_number_of_rows];
-			this.wrapper.find(".table-message").html(`
+			this.wrapper.find('.table-message').html(`
 				<div class="text-muted margin-top text-medium">
-				${__("Showing only first {0} rows out of {1}", parts)}
+				${__('Showing only first {0} rows out of {1}', parts)}
 				</div>
 			`);
 		}
 
 		if (this.data.length === 0) {
-			this.datatable.style.setStyle(".dt-scrollable", {
-				height: "auto",
+			this.datatable.style.setStyle('.dt-scrollable', {
+				height: 'auto'
 			});
 		}
 
-		this.datatable.style.setStyle(".dt-dropdown", {
-			display: "none",
+		this.datatable.style.setStyle('.dt-dropdown', {
+			display: 'none'
 		});
 	}
 
 	setup_styles() {
 		// import success checkbox
 		this.datatable.style.setStyle(`svg.import-success`, {
-			width: "16px",
-			fill: frappe.ui.color.get_color_shade("green", "dark"),
+			width: '16px',
+			fill: frappe.ui.color.get_color_shade('green', 'dark')
 		});
 		// make successfully imported rows readonly
 		let row_classes = this.datatable
 			.getRows()
-			.filter((row) => this.is_row_imported(row))
-			.map((row) => row.meta.rowIndex)
-			.map((i) => `.dt-row-${i} .dt-cell`)
-			.join(",");
+			.filter(row => this.is_row_imported(row))
+			.map(row => row.meta.rowIndex)
+			.map(i => `.dt-row-${i} .dt-cell`)
+			.join(',');
 		this.datatable.style.setStyle(row_classes, {
-			pointerEvents: "none",
-			backgroundColor: frappe.ui.color.get_color_shade("gray", "extra-light"),
-			color: frappe.ui.color.get_color_shade("gray", "dark"),
+			pointerEvents: 'none',
+			backgroundColor: frappe.ui.color.get_color_shade('gray', 'extra-light'),
+			color: frappe.ui.color.get_color_shade('gray', 'dark')
 		});
 	}
 
 	add_actions() {
 		let actions = [
 			{
-				label: __("Map Columns"),
-				handler: "show_column_mapper",
-				condition: this.frm.doc.status !== "Success",
-			},
-			{
-				label: __("Export Errored Rows"),
-				handler: "export_errored_rows",
-				condition: this.import_log.filter((log) => !log.success).length > 0,
+				label: __('Export Errored Rows'),
+				handler: 'export_errored_rows',
+				condition: this.import_log.filter(log => !log.success).length > 0
 			},
 			{
-				label: __("Show Warnings"),
-				handler: "show_warnings",
-				condition: this.preview_data.warnings.length > 0,
-			},
+				label: __('Show Warnings'),
+				handler: 'show_warnings',
+				condition: this.preview_data.warnings.length > 0
+			}
 		];
 
 		let html = actions
-			.filter((action) => action.condition)
-			.map((action) => {
+			.filter(action => action.condition)
+			.map(action => {
 				return `<button class="btn btn-sm btn-default" data-action="${action.handler}">
 					${action.label}
 				</button>
 			`;
 			});
 
-		this.wrapper.find(".table-actions").html(html);
+		this.wrapper.find('.table-actions').html(html);
 	}
 
 	export_errored_rows() {
-		this.frm.trigger("export_errored_rows");
+		this.frm.trigger('export_errored_rows');
 	}
 
 	show_warnings() {
-		this.frm.scroll_to_field("import_warnings");
+		this.frm.scroll_to_field('import_warnings');
 	}
 
 	show_column_warning(_, $target) {
 		let $warning = this.frm
-			.get_field("import_warnings")
-			.$wrapper.find(`[data-col=${$target.data("col")}]`);
+			.get_field('import_warnings')
+			.$wrapper.find(`[data-col=${$target.data('col')}]`);
 		frappe.utils.scroll_to($warning, true, 30);
 	}
 
 	show_column_mapper() {
 		let column_picker_fields = get_columns_for_picker(this.doctype);
-		let changed = [];
+		let changed ;
 		let fields = this.preview_data.columns.map((col, i) => {
 			let df = col.df;
-			if (col.header_title === "Sr. No") return [];
+			if (col.header_title === 'Sr. No') return [];
 
 			let fieldname;
 			if (!df) {
@@ -249,104 +261,373 @@ frappe.data_import.ImportPreview = class ImportPreview {
 			}
 			return [
 				{
-					label: "",
-					fieldtype: "Data",
+					label: '',
+					fieldtype: 'Data',
 					default: col.header_title,
 					fieldname: `Column ${i}`,
-					read_only: 1,
+					read_only: 1
 				},
 				{
-					fieldtype: "Column Break",
+					fieldtype: 'Column Break'
 				},
 				{
-					fieldtype: "Autocomplete",
+					fieldtype: 'Autocomplete',
 					fieldname: i,
-					label: "",
+					label: '',
 					max_items: Infinity,
 					options: [
 						{
 							label: __("Don't Import"),
-							value: "Don't Import",
-						},
+							value: "Don't Import"
+						}
 					].concat(get_fields_as_options(this.doctype, column_picker_fields)),
 					default: fieldname || "Don't Import",
 					change() {
 						changed.push(i);
-					},
+					}
 				},
 				{
-					fieldtype: "Section Break",
-				},
+					fieldtype: 'Section Break'
+				}
 			];
 		});
 		// flatten the array
 		fields = fields.reduce((acc, curr) => [...acc, ...curr]);
-		let file_name = (this.frm.doc.import_file || "").split("/").pop();
+		let file_name = (this.frm.doc.import_file || '').split('/').pop();
 		let parts = [file_name.bold(), this.doctype.bold()];
 		fields = [
 			{
-				fieldtype: "HTML",
-				fieldname: "heading",
+				fieldtype: 'HTML',
+				fieldname: 'heading',
 				options: `
 					<div class="margin-top text-muted">
-					${__("Map columns from {0} to fields in {1}", parts)}
+					${__('Map columns from {0} to fields in {1}', parts)}
 					</div>
-				`,
+				`
 			},
 			{
-				fieldtype: "Section Break",
-			},
+				fieldtype: 'Section Break'
+			}
 		].concat(fields);
+		console.log(fields)
 
-		let dialog = new frappe.ui.Dialog({
-			title: __("Map Columns"),
-			fields,
-			primary_action: (values) => {
-				let changed_map = {};
-				changed.map((i) => {
-					let header_row_index = i - 1;
-					changed_map[header_row_index] = values[i];
-				});
-				if (changed.length > 0) {
-					this.events.remap_column(changed_map);
-				}
-				dialog.hide();
-			},
-		});
-		dialog.$body.addClass("map-columns");
-		dialog.show();
+		
 	}
 
 	is_row_imported(row) {
 		let serial_no = row[0].content;
-		return this.import_log.find((log) => {
-			return log.success && JSON.parse(log.row_indexes || "[]").includes(serial_no);
+		return this.import_log.find(log => {
+			return log.success && log.row_indexes.includes(serial_no);
 		});
 	}
 };
 
 function get_fields_as_options(doctype, column_map) {
 	let keys = [doctype];
-	frappe.meta.get_table_fields(doctype).forEach((df) => {
+	frappe.meta.get_table_fields(doctype).forEach(df => {
 		keys.push(df.fieldname);
 	});
 	// flatten array
 	return [].concat(
-		...keys.map((key) => {
-			return column_map[key].map((df) => {
-				let label = __(df.label);
+		...keys.map(key => {
+			return column_map[key].map(df => {
+				let label = df.label;
 				let value = df.fieldname;
 				if (doctype !== key) {
 					let table_field = frappe.meta.get_docfield(doctype, key);
-					label = `${__(df.label)} (${__(table_field.label)})`;
+					label = `${df.label} (${table_field.label})`;
 					value = `${table_field.fieldname}.${df.fieldname}`;
 				}
 				return {
 					label,
 					value,
-					description: value,
+					description: value
 				};
 			});
 		})
 	);
 }
+
+
+function get_columns_for_picker(doctype,exporting_for) {
+	let out = {};
+	console.log("here");
+	const exportable_fields = df => {
+		let keep = true;
+		if (frappe.model.no_value_type.includes(df.fieldtype)) {
+			keep = false;
+		}
+		if (['lft', 'rgt'].includes(df.fieldname)) {
+			keep = false;
+		}
+		return keep;
+	};
+
+	// parent
+	let doctype_fields = frappe.meta
+		.get_docfields(doctype)
+		.filter(exportable_fields);
+	if(doctype=='Contact'){
+		out[doctype] = [
+			{
+				label: __('ID'),
+				fieldname: 'name',
+				fieldtype: 'Data',
+				reqd: 1
+			},
+			{
+				label: __("Contact Name"),
+				fieldname: doctype_fields[0].fieldname,
+				fieldtype: 'Data',
+				reqd: 1
+			},
+			{
+				label: __('phone number'),
+				fieldname: doctype_fields[5].fieldname,
+				fieldtype: 'Int',
+				reqd: 1
+			},
+			{
+				label: __('Email Address'),
+				fieldname: doctype_fields[11].fieldname,
+				fieldtype: 'Data',
+				reqd: 1
+			},
+			{
+				label: __('Company'),
+				fieldname: doctype_fields[18].fieldname,
+				fieldtype: 'Data',
+				reqd: 1
+			},
+		].concat(doctype_fields.slice(31,35));
+
+	}
+	else if(doctype=='Employee'){
+		if(exporting_for=='Update Existing Records'){
+			out[doctype] = [
+				{
+					label: __('ID'),
+					fieldname: 'name',
+					fieldtype: 'Data',
+					reqd: 1
+				},
+				{
+					label: __("First Name"),
+					fieldname: "first_name",
+					fieldtype: 'Data',
+					reqd: 1
+				},
+				{
+					label: __('Last Name'),
+					fieldname: "last_name",
+					fieldtype: 'Data',
+					reqd: 1
+				},
+				{
+					label: __('Email'),
+					fieldname: "email",
+					fieldtype: 'Data',
+					reqd: 1
+				},
+				{
+					label: __('Company'),
+					fieldname: "company",
+					fieldtype: 'Link',
+					reqd: 1
+				},
+				{
+					label: __('Status'),
+					fieldname: "status",
+					fieldtype: 'Select',
+					reqd: 1
+				},
+				{
+					label: __('Date of Birth'),
+					fieldname: "date_of_birth",
+					fieldtype: 'Date',
+					reqd: 1
+				},
+				{
+					label: __("Contact Number"),
+					fieldname: "contact_number",
+					fieldtype: 'Data',
+					reqd: 0
+				},
+				{
+					label: __('Gender'),
+					fieldname: "employee_gender",
+					fieldtype: 'Select',
+					reqd: 0
+				},
+				{
+					label: __('SSN'),
+					fieldname: "sssn",
+					fieldtype: 'Data',
+					reqd: 0
+				},
+				{
+					label: __('Military Veteran'),
+					fieldname: "military_veteran",
+					fieldtype: 'Check',
+					reqd: 0
+				},
+				{
+					label: __('Street Address'),
+					fieldname: "street_address",
+					fieldtype: 'Data',
+					reqd: 0
+				},
+				{
+					label: __('Suite or Apartment No'),
+					fieldname: "suite_or_apartment_no",
+					fieldtype: 'Data',
+					reqd: 0
+				},
+				{
+					label: __('City'),
+					fieldname: "city",
+					fieldtype: 'Data',
+					reqd: 0
+				},{
+					label: __("State"),
+					fieldname: "state",
+					fieldtype: 'Data',
+					reqd: 0
+				},
+				{
+					label: __('Zip'),
+					fieldname: "zip",
+					fieldtype: 'Data',
+					reqd: 0
+				},
+		]
+		}
+		else{
+			out[doctype] = [
+				{
+					label: __("First Name"),
+					fieldname: "first_name",
+					fieldtype: 'Data',
+					reqd: 1
+				},
+				{
+					label: __('Last Name'),
+					fieldname: "last_name",
+					fieldtype: 'Data',
+					reqd: 1
+				},
+				{
+					label: __('Email'),
+					fieldname: "email",
+					fieldtype: 'Data',
+					reqd: 1
+				},
+				{
+					label: __('Company'),
+					fieldname: "company",
+					fieldtype: 'Link',
+					reqd: 1
+				},
+				{
+					label: __('Status'),
+					fieldname: "status",
+					fieldtype: 'Select',
+					reqd: 1
+				},
+				{
+					label: __('Date of Birth'),
+					fieldname: "date_of_birth",
+					fieldtype: 'Date',
+					reqd: 1
+				},
+				{
+					label: __("Contact Number"),
+					fieldname: "contact_number",
+					fieldtype: 'Data',
+					reqd: 0
+				},
+				{
+					label: __('Gender'),
+					fieldname: "employee_gender",
+					fieldtype: 'Select',
+					reqd: 0
+				},
+				{
+					label: __('SSN'),
+					fieldname: "sssn",
+					fieldtype: 'Data',
+					reqd: 0
+				},
+				{
+					label: __('Military Veteran'),
+					fieldname: "military_veteran",
+					fieldtype: 'Check',
+					reqd: 0
+				},
+				{
+					label: __('Street Address'),
+					fieldname: "street_address",
+					fieldtype: 'Data',
+					reqd: 0
+				},
+				{
+					label: __('Suite or Apartment No'),
+					fieldname: "suite_or_apartment_no",
+					fieldtype: 'Data',
+					reqd: 0
+				},
+				{
+					label: __('City'),
+					fieldname: "city",
+					fieldtype: 'Data',
+					reqd: 0
+				},{
+					label: __("State"),
+					fieldname: "state",
+					fieldtype: 'Data',
+					reqd: 0
+				},
+				{
+					label: __('Zip'),
+					fieldname: "zip",
+					fieldtype: 'Data',
+					reqd: 0
+				},
+
+
+			]
+
+		}
+
+	}
+	else{
+
+		out[doctype] = [
+			{
+				label: __('ID'),
+				fieldname: 'name',
+				fieldtype: 'Data',
+				reqd: 1
+			}
+		].concat(doctype_fields);
+	}
+	// children
+	const table_fields = frappe.meta.get_table_fields(doctype);
+	table_fields.forEach(df => {
+		const cdt = df.options;
+		const child_table_fields = frappe.meta
+			.get_docfields(cdt)
+			.filter(exportable_fields);
+
+		out[df.fieldname] = [
+			{
+				label: __('ID'),
+				fieldname: 'name',
+				fieldtype: 'Data',
+				reqd: 1
+			}
+		].concat(child_table_fields);
+	});
+
+	return out;
+}
